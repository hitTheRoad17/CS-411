/* The following code was generated by JFlex 1.4.3 on 3/4/18 7:08 PM */

//CS 411 Project2
//Lexical Analyzer
//Ka Hei Lee
//Hanbo Ye

import java.util.ArrayList;
import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/4/18 7:08 PM from the specification file
 * <tt>toy.flex</tt>
 */
public class LexicalAnalyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\16\2\0\1\20\22\0\1\17\1\54\1\15\2\0"+
    "\1\50\2\0\1\57\1\60\1\22\1\11\1\56\1\12\1\13\1\21"+
    "\1\3\11\2\1\0\1\55\1\51\1\52\1\53\2\0\4\6\1\7"+
    "\1\6\21\1\1\5\2\1\1\61\1\0\1\62\1\0\1\14\1\0"+
    "\1\26\1\23\1\32\1\34\1\10\1\37\1\45\1\47\1\40\1\1"+
    "\1\31\1\25\1\41\1\27\1\24\1\42\1\1\1\30\1\33\1\36"+
    "\1\35\1\46\1\43\1\4\1\44\1\1\1\63\1\0\1\64\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\2\1\4\1\5\1\6"+
    "\1\1\3\7\1\10\1\11\14\2\1\12\1\13\1\14"+
    "\1\15\1\1\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\0\1\26\1\0\2\2\1\0\1\27"+
    "\2\0\13\2\1\30\4\2\1\31\1\32\1\33\1\34"+
    "\1\26\1\0\1\3\2\2\2\0\11\2\1\35\1\2"+
    "\1\36\5\2\1\37\1\0\10\2\1\40\4\2\1\41"+
    "\2\2\1\42\3\2\1\43\5\2\1\44\3\2\1\45"+
    "\1\46\1\47\1\50\3\2\1\51\1\52\3\2\1\53"+
    "\1\54\2\2\1\55\1\2\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\65\0\65"+
    "\0\65\0\u013e\0\65\0\u0173\0\u01a8\0\u01dd\0\65\0\u0212"+
    "\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba"+
    "\0\u03ef\0\u0424\0\u0459\0\65\0\u048e\0\u04c3\0\u04f8\0\u052d"+
    "\0\65\0\65\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u013e\0\65\0\u066b"+
    "\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813"+
    "\0\u0848\0\u087d\0\u08b2\0\u08e7\0\152\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\65\0\65\0\65\0\65\0\u09f0\0\u09f0\0\u05cc"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63\0\u0b98"+
    "\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\152\0\u0cd6\0\u0d0b"+
    "\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\152\0\u0e49\0\u0e7e"+
    "\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\152"+
    "\0\u1026\0\u105b\0\u1090\0\u10c5\0\152\0\u10fa\0\u112f\0\152"+
    "\0\u1164\0\u1199\0\u11ce\0\152\0\u1203\0\u1238\0\u126d\0\u12a2"+
    "\0\u12d7\0\152\0\u130c\0\u1341\0\u1376\0\152\0\152\0\152"+
    "\0\152\0\u13ab\0\u13e0\0\u1415\0\152\0\152\0\u144a\0\u147f"+
    "\0\u14b4\0\152\0\152\0\u14e9\0\u151e\0\152\0\u1553\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\4\3\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\3\3\1\21\1\22\1\3\1\23\1\24\1\25"+
    "\1\3\1\26\1\27\1\30\1\3\1\31\1\32\2\3"+
    "\1\33\1\3\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\66\0"+
    "\10\3\3\0\1\3\6\0\25\3\17\0\2\4\3\0"+
    "\2\51\2\0\1\52\53\0\2\4\2\53\1\0\2\51"+
    "\2\0\1\52\52\0\3\3\1\54\4\3\3\0\1\3"+
    "\6\0\2\3\1\55\22\3\15\0\15\56\1\57\1\0"+
    "\46\56\17\0\1\14\63\0\1\13\67\0\1\60\1\61"+
    "\43\0\10\3\3\0\1\3\6\0\1\3\1\62\3\3"+
    "\1\63\17\3\16\0\7\3\1\64\3\0\1\3\6\0"+
    "\25\3\16\0\7\3\1\65\3\0\1\3\6\0\25\3"+
    "\16\0\10\3\3\0\1\3\6\0\2\3\1\66\22\3"+
    "\16\0\10\3\3\0\1\3\6\0\13\3\1\67\11\3"+
    "\16\0\10\3\3\0\1\3\6\0\1\3\1\70\23\3"+
    "\16\0\10\3\3\0\1\3\6\0\5\3\1\71\17\3"+
    "\16\0\10\3\3\0\1\3\6\0\1\3\1\72\1\3"+
    "\1\73\21\3\16\0\10\3\3\0\1\3\6\0\4\3"+
    "\1\74\7\3\1\75\1\3\1\76\6\3\16\0\10\3"+
    "\3\0\1\3\6\0\5\3\1\77\17\3\16\0\10\3"+
    "\3\0\1\3\6\0\24\3\1\100\16\0\10\3\3\0"+
    "\1\3\6\0\1\3\1\101\23\3\67\0\1\102\64\0"+
    "\1\103\64\0\1\104\64\0\1\105\14\0\2\106\5\0"+
    "\2\107\54\0\2\52\3\0\2\51\56\0\2\110\2\0"+
    "\3\110\12\0\1\110\2\0\1\110\3\0\1\110\1\0"+
    "\1\110\2\0\1\110\26\0\10\3\3\0\1\3\6\0"+
    "\13\3\1\111\11\3\16\0\10\3\3\0\1\3\6\0"+
    "\10\3\1\112\14\3\15\0\16\60\1\13\1\60\1\15"+
    "\44\60\22\113\1\114\42\113\1\0\10\3\3\0\1\3"+
    "\6\0\1\3\1\115\23\3\16\0\7\3\1\116\3\0"+
    "\1\3\6\0\25\3\16\0\10\3\3\0\1\3\6\0"+
    "\20\3\1\117\4\3\16\0\10\3\3\0\1\3\6\0"+
    "\3\3\1\120\7\3\1\121\11\3\16\0\10\3\3\0"+
    "\1\3\6\0\3\3\1\122\21\3\16\0\10\3\3\0"+
    "\1\3\6\0\5\3\1\123\17\3\16\0\10\3\3\0"+
    "\1\3\6\0\12\3\1\124\12\3\16\0\10\3\3\0"+
    "\1\3\6\0\12\3\1\125\12\3\16\0\10\3\3\0"+
    "\1\3\6\0\5\3\1\126\17\3\16\0\10\3\3\0"+
    "\1\3\6\0\2\3\1\127\22\3\16\0\10\3\3\0"+
    "\1\3\6\0\13\3\1\130\11\3\16\0\10\3\3\0"+
    "\1\3\6\0\17\3\1\131\5\3\16\0\10\3\3\0"+
    "\1\3\6\0\15\3\1\132\7\3\16\0\10\3\3\0"+
    "\1\3\6\0\15\3\1\133\7\3\16\0\10\3\3\0"+
    "\1\3\6\0\15\3\1\134\7\3\17\0\2\106\62\0"+
    "\7\3\1\135\3\0\1\3\6\0\25\3\16\0\7\3"+
    "\1\136\3\0\1\3\6\0\25\3\15\0\22\113\1\137"+
    "\42\113\21\0\1\13\1\114\43\0\10\3\3\0\1\3"+
    "\6\0\2\3\1\140\22\3\16\0\10\3\3\0\1\3"+
    "\6\0\3\3\1\141\21\3\16\0\10\3\3\0\1\3"+
    "\6\0\3\3\1\142\21\3\16\0\10\3\3\0\1\3"+
    "\6\0\11\3\1\143\13\3\16\0\10\3\3\0\1\3"+
    "\6\0\12\3\1\144\12\3\16\0\10\3\3\0\1\3"+
    "\6\0\10\3\1\145\14\3\16\0\10\3\3\0\1\3"+
    "\6\0\15\3\1\146\7\3\16\0\10\3\3\0\1\3"+
    "\6\0\1\147\24\3\16\0\7\3\1\150\3\0\1\3"+
    "\6\0\25\3\16\0\10\3\3\0\1\3\6\0\10\3"+
    "\1\125\14\3\16\0\7\3\1\151\3\0\1\3\6\0"+
    "\25\3\16\0\10\3\3\0\1\3\6\0\2\3\1\152"+
    "\22\3\16\0\10\3\3\0\1\3\6\0\4\3\1\153"+
    "\20\3\16\0\10\3\3\0\1\3\6\0\2\3\1\154"+
    "\22\3\16\0\10\3\3\0\1\3\6\0\11\3\1\155"+
    "\13\3\16\0\10\3\3\0\1\3\6\0\4\3\1\156"+
    "\20\3\15\0\21\113\1\13\1\137\42\113\1\0\7\3"+
    "\1\157\3\0\1\3\6\0\25\3\16\0\10\3\3\0"+
    "\1\3\6\0\6\3\1\160\16\3\16\0\10\3\3\0"+
    "\1\3\6\0\5\3\1\161\17\3\16\0\10\3\3\0"+
    "\1\3\6\0\2\3\1\162\22\3\16\0\10\3\3\0"+
    "\1\3\6\0\5\3\1\163\17\3\16\0\10\3\3\0"+
    "\1\3\6\0\10\3\1\164\14\3\16\0\10\3\3\0"+
    "\1\3\6\0\4\3\1\165\20\3\16\0\10\3\3\0"+
    "\1\3\6\0\2\3\1\166\22\3\16\0\10\3\3\0"+
    "\1\3\6\0\5\3\1\167\17\3\16\0\7\3\1\170"+
    "\3\0\1\3\6\0\25\3\16\0\10\3\3\0\1\3"+
    "\6\0\13\3\1\171\11\3\16\0\7\3\1\172\3\0"+
    "\1\3\6\0\25\3\16\0\10\3\3\0\1\3\6\0"+
    "\11\3\1\173\13\3\16\0\10\3\3\0\1\3\6\0"+
    "\3\3\1\174\21\3\16\0\10\3\3\0\1\3\6\0"+
    "\5\3\1\175\17\3\16\0\10\3\3\0\1\3\6\0"+
    "\4\3\1\176\20\3\16\0\10\3\3\0\1\3\6\0"+
    "\4\3\1\177\20\3\16\0\10\3\3\0\1\3\6\0"+
    "\22\3\1\200\2\3\16\0\7\3\1\201\3\0\1\3"+
    "\6\0\25\3\16\0\10\3\3\0\1\3\6\0\14\3"+
    "\1\202\10\3\16\0\10\3\3\0\1\3\6\0\16\3"+
    "\1\203\6\3\16\0\10\3\3\0\1\3\6\0\2\3"+
    "\1\204\22\3\16\0\10\3\3\0\1\3\6\0\10\3"+
    "\1\205\14\3\16\0\10\3\3\0\1\3\6\0\4\3"+
    "\1\206\20\3\16\0\10\3\3\0\1\3\6\0\3\3"+
    "\1\207\21\3\16\0\10\3\3\0\1\3\6\0\3\3"+
    "\1\210\21\3\16\0\7\3\1\211\3\0\1\3\6\0"+
    "\25\3\16\0\10\3\3\0\1\3\6\0\4\3\1\212"+
    "\20\3\16\0\10\3\3\0\1\3\6\0\21\3\1\213"+
    "\3\3\16\0\10\3\3\0\1\3\6\0\7\3\1\214"+
    "\15\3\16\0\10\3\3\0\1\3\6\0\4\3\1\215"+
    "\20\3\16\0\7\3\1\216\3\0\1\3\6\0\25\3"+
    "\16\0\10\3\3\0\1\3\6\0\13\3\1\217\11\3"+
    "\16\0\10\3\3\0\1\3\6\0\10\3\1\220\14\3"+
    "\15\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5512];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\3\11\1\1\1\11\3\1\1\11"+
    "\14\1\1\11\4\1\10\11\1\0\1\1\1\0\2\1"+
    "\1\0\1\11\2\0\20\1\4\11\1\1\1\0\3\1"+
    "\2\0\22\1\1\0\61\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[144];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int sym) {
        return new Symbol(sym, yyline+1, yycolumn+1);
    }

    public class symbol_table {
        public int [] control = new int[52];
        public ArrayList<Integer> next = new ArrayList<Integer>();
        public ArrayList<Character> symbol = new ArrayList<Character>();
        
        public symbol_table() {
            for (int i = 0; i < this.control.length; ++i) {
                this.control[i] = -1; 
            }
        }
    }

    public symbol_table s = new symbol_table();

  // Return array index of character
    public int alphaIndex(char c) {
        int v = c;
        if (v >= 97) {
            return v - 97 + 26;
        }
        return v - 65; 
    }

    public void trie(String str) {
        int value = alphaIndex(str.charAt(0));
        int ptr = s.control[value];

    if (ptr == -1) { // Undefined
        // point to last 
        s.control[value] = s.symbol.size();
        // add the rest of the characters
        for (int i = 1; i < str.length(); ++i) {
            s.symbol.add(str.charAt(i));
        }
        s.symbol.add('@'); 
    }
    else { // Defined
        
        int i = 1; // 2nd character, 'i' is the symbol counter
        boolean exit = false;

        if(str.length() == 1) {
            return;
        }

        while(!exit) {
            if (s.symbol.get(ptr) == str.charAt(i)) {
                // if endmarker
                if(str.length() -1 <= i) {
                    exit = true;
                    break; 
                }
                i++; 
                ptr++;
            }
            else if((s.next.size() > ptr) && (s.next.get(ptr) != -1)) {
                ptr = s.next.get(ptr);
            }
            else {

                while(s.next.size() <= ptr) {
                    s.next.add(-1);
                } // grow the (next) array

                // Set next available which will 
                // always be size() (dynamically allocated)
                s.next.set(ptr,s.symbol.size()); 

                while(i < str.length()) {
                    s.symbol.add(str.charAt(i++));
                }
                s.symbol.add('@');

                exit = true;
                break;
            }
        }


    }

}

public void printControl(int head, int tail) {
    System.out.printf("%-10s", "switch:");
    int v = 0;
    for (; head < tail; ++head) {
        v = s.control[head];
        if (v == -1) {
            System.out.print("$   ");
        }
        else {
            System.out.printf("%-3d ", v);
        }
    }
    System.out.println("\n");
}

public void printSymbol(int head, int tail) {
    System.out.printf("%-10s", "symbol:");
    for(int i = head; i < tail; ++i) {
        System.out.printf("%c   ", s.symbol.get(i));
    }
    System.out.println();
}

public void printNext(int head, int tail) {
    System.out.printf("%-10s", "next:");
    int v = 0;
    for (int i = head; i < tail; ++i) {
        v = s.next.get(i);
        if (v == -1) {
            System.out.print("$   ");
        }
        else {
            System.out.printf("%-3d ", v);
        }
    }
    System.out.println("\n");       

}

private void equalizeNext() {
    if (s.symbol.size() > s.next.size()) {
        while (s.next.size() != s.symbol.size()) {
            s.next.add(-1);
        }
    }
}

public void printTable() {
    String alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    System.out.printf("%-10s","");
    int head = 0;
    int i = 0;
    for (; i < 52; ++i) {
        if ((i+1)%20 == 0) {
            System.out.println();
            printControl(head,i);
            System.out.printf("%-10s","");
            head = i;
        }
        System.out.printf("%c   ", alpha.charAt(i));
    }
    System.out.println();
    printControl(head,i);

    equalizeNext();

    i = 0;
    head  = 0;
    System.out.printf("%-10s",""); 
    for (; i < s.symbol.size(); ++i) {
        if ((i+1)%20 == 0) {
            System.out.println();
            printSymbol(head,i);
            printNext(head,i);
            System.out.printf("%-10s","");
            head = i;
        }
        System.out.printf("%-3d ", i);
    }
    System.out.println();
    printSymbol(head,i);
    printNext(head,i);
}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LexicalAnalyzer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 140) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 37: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_readln);
          }
        case 47: break;
        case 34: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_break);
          }
        case 48: break;
        case 36: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_while);
          }
        case 49: break;
        case 14: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_semicolon);
          }
        case 50: break;
        case 19: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_rightbracket);
          }
        case 51: break;
        case 42: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_boolean);
          }
        case 52: break;
        case 44: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_newarray);
          }
        case 53: break;
        case 39: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_string);
          }
        case 54: break;
        case 1: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.error);
          }
        case 55: break;
        case 4: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_plus);
          }
        case 56: break;
        case 5: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_minus);
          }
        case 57: break;
        case 11: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_less);
          }
        case 58: break;
        case 30: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_int);
          }
        case 59: break;
        case 33: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_void);
          }
        case 60: break;
        case 27: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_greaterequal);
          }
        case 61: break;
        case 12: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_assignop);
          }
        case 62: break;
        case 31: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_else);
          }
        case 63: break;
        case 28: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_notequal);
          }
        case 64: break;
        case 15: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_comma);
          }
        case 65: break;
        case 25: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_lessequal);
          }
        case 66: break;
        case 10: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_mod);
          }
        case 67: break;
        case 32: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_booleanconstant);
          }
        case 68: break;
        case 35: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_class);
          }
        case 69: break;
        case 21: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_rightbrace);
          }
        case 70: break;
        case 20: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_leftbrace);
          }
        case 71: break;
        case 38: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_return);
          }
        case 72: break;
        case 2: 
          { System.out.printf("%n%s ",yytext());trie(yytext());return symbol(sym.t_id);
          }
        case 73: break;
        case 6: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_period);
          }
        case 74: break;
        case 29: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_for);
          }
        case 75: break;
        case 41: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_extends);
          }
        case 76: break;
        case 8: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_division);
          }
        case 77: break;
        case 3: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_intconstant);
          }
        case 78: break;
        case 23: 
          { return symbol(sym.t_stringconstant);
          }
        case 79: break;
        case 45: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_interface);
          }
        case 80: break;
        case 43: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_println);
          }
        case 81: break;
        case 24: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_if);
          }
        case 82: break;
        case 9: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_multiplication);
          }
        case 83: break;
        case 40: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_double);
          }
        case 84: break;
        case 13: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_greater);
          }
        case 85: break;
        case 17: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_rightparen);
          }
        case 86: break;
        case 46: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_implements);
          }
        case 87: break;
        case 18: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_leftbracket);
          }
        case 88: break;
        case 16: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_leftparen);
          }
        case 89: break;
        case 22: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_doubleconstant);
          }
        case 90: break;
        case 7: 
          { 
          }
        case 91: break;
        case 26: 
          { System.out.printf("%n%s ",yytext());return symbol(sym.t_equal);
          }
        case 92: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

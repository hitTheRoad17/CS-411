/* The following code was generated by JFlex 1.6.1 */

//CS 411 Project1
//Lexical Analyzer

import java.util.ArrayList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/Administrator/Downloads/Cpp/CS 411/Project1/Toy.flex</tt>
 */
public class LexicalAnalyzer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\17\1\16\1\67\1\67\1\20\22\0\1\17\1\54\1\15"+
    "\2\0\1\50\1\55\1\0\1\61\1\62\1\22\1\11\1\60\1\12"+
    "\1\13\1\21\1\3\11\2\1\0\1\57\1\51\1\52\1\53\2\0"+
    "\4\6\1\7\1\6\21\1\1\5\2\1\1\63\1\0\1\64\1\0"+
    "\1\14\1\0\1\26\1\23\1\32\1\34\1\10\1\37\1\45\1\47"+
    "\1\40\1\1\1\31\1\25\1\41\1\27\1\24\1\42\1\1\1\30"+
    "\1\33\1\36\1\35\1\46\1\43\1\4\1\44\1\1\1\65\1\56"+
    "\1\66\7\0\1\67\u1fa2\0\1\67\1\67\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\2\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\14\2\1\13\1\14"+
    "\1\15\1\16\1\17\2\1\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\0\1\30\1\0\2\2"+
    "\1\0\1\31\2\0\13\2\1\32\4\2\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\30\1\0\1\3\2\2"+
    "\2\10\2\0\11\2\1\41\1\2\1\42\5\2\1\43"+
    "\1\0\10\2\1\44\4\2\1\45\2\2\1\46\3\2"+
    "\1\47\5\2\1\50\3\2\1\51\1\52\1\53\1\54"+
    "\3\2\1\55\1\56\3\2\1\57\1\60\2\2\1\61"+
    "\1\2\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\70\0\70"+
    "\0\70\0\u0150\0\70\0\u0188\0\u01c0\0\70\0\u01f8\0\u0230"+
    "\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348\0\u0380\0\u03b8\0\u03f0"+
    "\0\u0428\0\u0460\0\70\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578"+
    "\0\u05b0\0\70\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0150\0\70"+
    "\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888"+
    "\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\160\0\u09d8\0\u0a10"+
    "\0\u0a48\0\u0a80\0\70\0\70\0\70\0\70\0\70\0\70"+
    "\0\u0ab8\0\u0ab8\0\u0658\0\u0af0\0\u0b28\0\70\0\u0b60\0\u0b98"+
    "\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20\0\u0d58"+
    "\0\u0d90\0\u0dc8\0\160\0\u0e00\0\u0e38\0\u0e70\0\u0ea8\0\u0ee0"+
    "\0\u0f18\0\u0f50\0\160\0\u0f88\0\u0fc0\0\u0ff8\0\u1030\0\u1068"+
    "\0\u10a0\0\u10d8\0\u1110\0\u1148\0\160\0\u1180\0\u11b8\0\u11f0"+
    "\0\u1228\0\160\0\u1260\0\u1298\0\160\0\u12d0\0\u1308\0\u1340"+
    "\0\160\0\u1378\0\u13b0\0\u13e8\0\u1420\0\u1458\0\160\0\u1490"+
    "\0\u14c8\0\u1500\0\160\0\160\0\160\0\160\0\u1538\0\u1570"+
    "\0\u15a8\0\160\0\160\0\u15e0\0\u1618\0\u1650\0\160\0\160"+
    "\0\u1688\0\u16c0\0\160\0\u16f8\0\160";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\4\3\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\1\13\1\14\1\0\1\15\1\16"+
    "\1\17\3\3\1\20\1\21\1\3\1\22\1\23\1\24"+
    "\1\3\1\25\1\26\1\27\1\3\1\30\1\31\2\3"+
    "\1\32\1\3\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\72\0\10\3\3\0\1\3\6\0\25\3\22\0"+
    "\2\4\3\0\2\52\2\0\1\53\56\0\2\4\2\54"+
    "\1\0\2\52\2\0\1\53\55\0\3\3\1\55\4\3"+
    "\3\0\1\3\6\0\2\3\1\56\22\3\20\0\15\57"+
    "\1\60\1\0\51\57\17\0\1\14\71\0\1\61\1\62"+
    "\46\0\10\3\3\0\1\3\6\0\1\3\1\63\3\3"+
    "\1\64\17\3\21\0\7\3\1\65\3\0\1\3\6\0"+
    "\25\3\21\0\7\3\1\66\3\0\1\3\6\0\25\3"+
    "\21\0\10\3\3\0\1\3\6\0\2\3\1\67\22\3"+
    "\21\0\10\3\3\0\1\3\6\0\13\3\1\70\11\3"+
    "\21\0\10\3\3\0\1\3\6\0\1\3\1\71\23\3"+
    "\21\0\10\3\3\0\1\3\6\0\5\3\1\72\17\3"+
    "\21\0\10\3\3\0\1\3\6\0\1\3\1\73\1\3"+
    "\1\74\21\3\21\0\10\3\3\0\1\3\6\0\4\3"+
    "\1\75\7\3\1\76\1\3\1\77\6\3\21\0\10\3"+
    "\3\0\1\3\6\0\5\3\1\100\17\3\21\0\10\3"+
    "\3\0\1\3\6\0\24\3\1\101\21\0\10\3\3\0"+
    "\1\3\6\0\1\3\1\102\23\3\72\0\1\103\67\0"+
    "\1\104\67\0\1\105\67\0\1\106\72\0\1\107\70\0"+
    "\1\110\13\0\2\111\5\0\2\112\57\0\2\53\3\0"+
    "\2\52\61\0\2\113\2\0\3\113\12\0\1\113\2\0"+
    "\1\113\3\0\1\113\1\0\1\113\2\0\1\113\31\0"+
    "\10\3\3\0\1\3\6\0\13\3\1\114\11\3\21\0"+
    "\10\3\3\0\1\3\6\0\10\3\1\115\14\3\20\0"+
    "\16\61\1\116\1\61\1\117\47\61\22\120\1\121\45\120"+
    "\1\0\10\3\3\0\1\3\6\0\1\3\1\122\23\3"+
    "\21\0\7\3\1\123\3\0\1\3\6\0\25\3\21\0"+
    "\10\3\3\0\1\3\6\0\20\3\1\124\4\3\21\0"+
    "\10\3\3\0\1\3\6\0\3\3\1\125\7\3\1\126"+
    "\11\3\21\0\10\3\3\0\1\3\6\0\3\3\1\127"+
    "\21\3\21\0\10\3\3\0\1\3\6\0\5\3\1\130"+
    "\17\3\21\0\10\3\3\0\1\3\6\0\12\3\1\131"+
    "\12\3\21\0\10\3\3\0\1\3\6\0\12\3\1\132"+
    "\12\3\21\0\10\3\3\0\1\3\6\0\5\3\1\133"+
    "\17\3\21\0\10\3\3\0\1\3\6\0\2\3\1\134"+
    "\22\3\21\0\10\3\3\0\1\3\6\0\13\3\1\135"+
    "\11\3\21\0\10\3\3\0\1\3\6\0\17\3\1\136"+
    "\5\3\21\0\10\3\3\0\1\3\6\0\15\3\1\137"+
    "\7\3\21\0\10\3\3\0\1\3\6\0\15\3\1\140"+
    "\7\3\21\0\10\3\3\0\1\3\6\0\15\3\1\141"+
    "\7\3\22\0\2\111\65\0\7\3\1\142\3\0\1\3"+
    "\6\0\25\3\21\0\7\3\1\143\3\0\1\3\6\0"+
    "\25\3\36\0\1\116\51\0\22\120\1\144\45\120\21\0"+
    "\1\116\1\121\46\0\10\3\3\0\1\3\6\0\2\3"+
    "\1\145\22\3\21\0\10\3\3\0\1\3\6\0\3\3"+
    "\1\146\21\3\21\0\10\3\3\0\1\3\6\0\3\3"+
    "\1\147\21\3\21\0\10\3\3\0\1\3\6\0\11\3"+
    "\1\150\13\3\21\0\10\3\3\0\1\3\6\0\12\3"+
    "\1\151\12\3\21\0\10\3\3\0\1\3\6\0\10\3"+
    "\1\152\14\3\21\0\10\3\3\0\1\3\6\0\15\3"+
    "\1\153\7\3\21\0\10\3\3\0\1\3\6\0\1\154"+
    "\24\3\21\0\7\3\1\155\3\0\1\3\6\0\25\3"+
    "\21\0\10\3\3\0\1\3\6\0\10\3\1\132\14\3"+
    "\21\0\7\3\1\156\3\0\1\3\6\0\25\3\21\0"+
    "\10\3\3\0\1\3\6\0\2\3\1\157\22\3\21\0"+
    "\10\3\3\0\1\3\6\0\4\3\1\160\20\3\21\0"+
    "\10\3\3\0\1\3\6\0\2\3\1\161\22\3\21\0"+
    "\10\3\3\0\1\3\6\0\11\3\1\162\13\3\21\0"+
    "\10\3\3\0\1\3\6\0\4\3\1\163\20\3\20\0"+
    "\21\120\1\116\1\144\45\120\1\0\7\3\1\164\3\0"+
    "\1\3\6\0\25\3\21\0\10\3\3\0\1\3\6\0"+
    "\6\3\1\165\16\3\21\0\10\3\3\0\1\3\6\0"+
    "\5\3\1\166\17\3\21\0\10\3\3\0\1\3\6\0"+
    "\2\3\1\167\22\3\21\0\10\3\3\0\1\3\6\0"+
    "\5\3\1\170\17\3\21\0\10\3\3\0\1\3\6\0"+
    "\10\3\1\171\14\3\21\0\10\3\3\0\1\3\6\0"+
    "\4\3\1\172\20\3\21\0\10\3\3\0\1\3\6\0"+
    "\2\3\1\173\22\3\21\0\10\3\3\0\1\3\6\0"+
    "\5\3\1\174\17\3\21\0\7\3\1\175\3\0\1\3"+
    "\6\0\25\3\21\0\10\3\3\0\1\3\6\0\13\3"+
    "\1\176\11\3\21\0\7\3\1\177\3\0\1\3\6\0"+
    "\25\3\21\0\10\3\3\0\1\3\6\0\11\3\1\200"+
    "\13\3\21\0\10\3\3\0\1\3\6\0\3\3\1\201"+
    "\21\3\21\0\10\3\3\0\1\3\6\0\5\3\1\202"+
    "\17\3\21\0\10\3\3\0\1\3\6\0\4\3\1\203"+
    "\20\3\21\0\10\3\3\0\1\3\6\0\4\3\1\204"+
    "\20\3\21\0\10\3\3\0\1\3\6\0\22\3\1\205"+
    "\2\3\21\0\7\3\1\206\3\0\1\3\6\0\25\3"+
    "\21\0\10\3\3\0\1\3\6\0\14\3\1\207\10\3"+
    "\21\0\10\3\3\0\1\3\6\0\16\3\1\210\6\3"+
    "\21\0\10\3\3\0\1\3\6\0\2\3\1\211\22\3"+
    "\21\0\10\3\3\0\1\3\6\0\10\3\1\212\14\3"+
    "\21\0\10\3\3\0\1\3\6\0\4\3\1\213\20\3"+
    "\21\0\10\3\3\0\1\3\6\0\3\3\1\214\21\3"+
    "\21\0\10\3\3\0\1\3\6\0\3\3\1\215\21\3"+
    "\21\0\7\3\1\216\3\0\1\3\6\0\25\3\21\0"+
    "\10\3\3\0\1\3\6\0\4\3\1\217\20\3\21\0"+
    "\10\3\3\0\1\3\6\0\21\3\1\220\3\3\21\0"+
    "\10\3\3\0\1\3\6\0\7\3\1\221\15\3\21\0"+
    "\10\3\3\0\1\3\6\0\4\3\1\222\20\3\21\0"+
    "\7\3\1\223\3\0\1\3\6\0\25\3\21\0\10\3"+
    "\3\0\1\3\6\0\13\3\1\224\11\3\21\0\10\3"+
    "\3\0\1\3\6\0\10\3\1\225\14\3\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5936];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\3\11\1\1\1\11\2\1\1\11"+
    "\14\1\1\11\6\1\10\11\1\0\1\1\1\0\2\1"+
    "\1\0\1\11\2\0\20\1\6\11\1\1\1\0\3\1"+
    "\1\11\1\1\2\0\22\1\1\0\61\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

  public enum tokens {
    t_boolean, t_break, t_class, t_double,
    t_else, t_extends, t_for, t_if,
    t_implements, t_int, t_interface, t_newarray,
    t_println, t_readln, t_return, t_string,
    t_void, t_while, t_plus, t_minus,
    t_multiplication, t_division, t_mod, t_less,
    t_lessequal, t_greater, t_greaterequal, t_equal,
    t_notequal, t_and, t_or, t_not,
    t_assignop, t_semicolon, t_comma, t_period,
    t_leftparen, t_rightparen, t_leftbracket, t_rightbracket,
    t_leftbrace, t_rightbrace, t_intconstant, t_doubleconstant,
    t_stringconstant, t_booleanconstant, t_id
  }

  public class symbol_table {
    public int [] control = new int[52];
    public ArrayList<Integer> next = new ArrayList<Integer>();
    public ArrayList<Character> symbol = new ArrayList<Character>();
    
    public symbol_table() {
        for (int i = 0; i < this.control.length; ++i) {
            this.control[i] = -1; 
        }
    }
  }

  public symbol_table s = new symbol_table();

  public int alphaIndex(char c) {
    int v = c;
    if (v >= 97) {
        return v - 97 + 26;
    }
    return v - 65; 
  }

  public void trie(String str) {
    int value = alphaIndex(str.charAt(0));
    int ptr = s.control[value];

    if (ptr == -1) {
        s.control[value] = s.symbol.size();
        for (int i = 1; i < str.length(); ++i) {
            s.symbol.add(str.charAt(i));
        }
        s.symbol.add('@'); 
    }
    else {        
        int i = 1;
        boolean exit = false;

        if(str.length() == 1) {
            return;
        }

        while(!exit) {
            if (s.symbol.get(ptr) == str.charAt(i)) {
                if(str.length() -1 <= i) {
                    exit = true;
                    break; 
                }
                i++; 
                ptr++;
            }
            else if((s.next.size() > ptr) && (s.next.get(ptr) != -1)) {
                ptr = s.next.get(ptr);
            }
            else {

                while(s.next.size() <= ptr) {
                    s.next.add(-1);
                }

                s.next.set(ptr,s.symbol.size()); 

                while(i < str.length()) {
                    s.symbol.add(str.charAt(i++));
                }
                s.symbol.add('@');

                exit = true;
                break;
            }
        }

    }

  }

    public void printControl(int head, int tail) {
        System.out.printf("%-10s", "switch:");
        int v = 0;
        for (; head < tail; ++head) {
            v = s.control[head];
            if (v == -1) {
                System.out.print("$   ");
            }
            else {
                System.out.printf("%-3d ", v);
            }
        }
        System.out.println("\n");
    }

    public void printSymbol(int head, int tail) {
        System.out.printf("%-10s", "symbol:");
        for(int i = head; i < tail; ++i) {
            System.out.printf("%c   ", s.symbol.get(i));
        }
        System.out.println();
    }

    public void printNext(int head, int tail) {
        System.out.printf("%-10s", "next:");
        int v = 0;
        for (int i = head; i < tail; ++i) {
            v = s.next.get(i);
            if (v == -1) {
                System.out.print("$   ");
            }
            else {
                System.out.printf("%-3d ", v);
            }
        }
        System.out.println("\n");       

    }

    private void equalizeNext() {
        if (s.symbol.size() > s.next.size()) {
            while (s.next.size() != s.symbol.size()) {
                s.next.add(-1);
            }
        }
    }

    public void printTable() {
        String alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
        System.out.printf("%-10s","");
        int head = 0;
        int i = 0;
        for (; i < 52; ++i) {
            if ((i+1)%20 == 0) {
                System.out.println();
                printControl(head,i);
                System.out.printf("%-10s","");
                head = i;
            }
            System.out.printf("%c   ", alpha.charAt(i));
        }
        System.out.println();
        printControl(head,i);

        equalizeNext();

        i = 0;
        head  = 0;
        System.out.printf("%-10s",""); 
        for (; i < s.symbol.size(); ++i) {
            if ((i+1)%20 == 0) {
                System.out.println();
                printSymbol(head,i);
                printNext(head,i);
                System.out.printf("%-10s","");
                head = i;
            }
            System.out.printf("%-3d ", i);
        }
        System.out.println();
        printSymbol(head,i);
        printNext(head,i);
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 186) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Integer yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { /* ignore illegal chars */
            }
          case 51: break;
          case 2: 
            { System.out.print("id "); trie(yytext()); return tokens.t_id.ordinal();
            }
          case 52: break;
          case 3: 
            { System.out.print("intconstant "); return tokens.t_intconstant.ordinal();
            }
          case 53: break;
          case 4: 
            { System.out.print("plus "); return tokens.t_plus.ordinal();
            }
          case 54: break;
          case 5: 
            { System.out.print("minus "); return tokens.t_minus.ordinal();
            }
          case 55: break;
          case 6: 
            { System.out.print("period "); return tokens.t_period.ordinal();
            }
          case 56: break;
          case 7: 
            { System.out.print("\n");
            }
          case 57: break;
          case 8: 
            { 
            }
          case 58: break;
          case 9: 
            { System.out.print("division "); return tokens.t_division.ordinal();
            }
          case 59: break;
          case 10: 
            { System.out.print("multiplication "); return tokens.t_multiplication.ordinal();
            }
          case 60: break;
          case 11: 
            { System.out.print("mod "); return tokens.t_mod.ordinal();
            }
          case 61: break;
          case 12: 
            { System.out.print("less "); return tokens.t_less.ordinal();
            }
          case 62: break;
          case 13: 
            { System.out.print("assignop "); return tokens.t_assignop.ordinal();
            }
          case 63: break;
          case 14: 
            { System.out.print("greater "); return tokens.t_greater.ordinal();
            }
          case 64: break;
          case 15: 
            { System.out.print("not"); return tokens.t_not.ordinal();
            }
          case 65: break;
          case 16: 
            { System.out.print("semicolon "); return tokens.t_semicolon.ordinal();
            }
          case 66: break;
          case 17: 
            { System.out.print("comma "); return tokens.t_comma.ordinal();
            }
          case 67: break;
          case 18: 
            { System.out.print("leftparen "); return tokens.t_leftparen.ordinal();
            }
          case 68: break;
          case 19: 
            { System.out.print("rightparen "); return tokens.t_rightparen.ordinal();
            }
          case 69: break;
          case 20: 
            { System.out.print("rightbracket "); return tokens.t_rightbracket.ordinal();
            }
          case 70: break;
          case 21: 
            { System.out.print("leftbracket "); return tokens.t_leftbracket.ordinal();
            }
          case 71: break;
          case 22: 
            { System.out.print("leftbrace "); return tokens.t_leftbrace.ordinal();
            }
          case 72: break;
          case 23: 
            { System.out.print("rightbrace "); return tokens.t_rightbrace.ordinal();
            }
          case 73: break;
          case 24: 
            { System.out.print("doubleconstant "); return tokens.t_doubleconstant.ordinal();
            }
          case 74: break;
          case 25: 
            { System.out.print("stringconstant "); return tokens.t_stringconstant.ordinal();
            }
          case 75: break;
          case 26: 
            { System.out.printf("%s ",yytext()); return tokens.t_if.ordinal();
            }
          case 76: break;
          case 27: 
            { System.out.print("lessequal "); return tokens.t_lessequal.ordinal();
            }
          case 77: break;
          case 28: 
            { System.out.print("equal "); return tokens.t_equal.ordinal();
            }
          case 78: break;
          case 29: 
            { System.out.print("greaterequal "); return tokens.t_greaterequal.ordinal();
            }
          case 79: break;
          case 30: 
            { System.out.print("notequal "); return tokens.t_notequal.ordinal();
            }
          case 80: break;
          case 31: 
            { System.out.print("and"); return tokens.t_and.ordinal();
            }
          case 81: break;
          case 32: 
            { System.out.print("or"); return tokens.t_or.ordinal();
            }
          case 82: break;
          case 33: 
            { System.out.printf("%s ",yytext()); return tokens.t_for.ordinal();
            }
          case 83: break;
          case 34: 
            { System.out.printf("%s ",yytext()); return tokens.t_int.ordinal();
            }
          case 84: break;
          case 35: 
            { System.out.printf("%s ",yytext()); return tokens.t_else.ordinal();
            }
          case 85: break;
          case 36: 
            { System.out.print("booleanconstant "); return tokens.t_booleanconstant.ordinal();
            }
          case 86: break;
          case 37: 
            { System.out.printf("%s ",yytext()); return tokens.t_void.ordinal();
            }
          case 87: break;
          case 38: 
            { System.out.printf("%s ",yytext()); return tokens.t_break.ordinal();
            }
          case 88: break;
          case 39: 
            { System.out.printf("%s ",yytext()); return tokens.t_class.ordinal();
            }
          case 89: break;
          case 40: 
            { System.out.printf("%s ",yytext()); return tokens.t_while.ordinal();
            }
          case 90: break;
          case 41: 
            { System.out.printf("%s ",yytext()); return tokens.t_readln.ordinal();
            }
          case 91: break;
          case 42: 
            { System.out.printf("%s ",yytext()); return tokens.t_return.ordinal();
            }
          case 92: break;
          case 43: 
            { System.out.printf("%s ",yytext()); return tokens.t_string.ordinal();
            }
          case 93: break;
          case 44: 
            { System.out.printf("%s ",yytext()); return tokens.t_double.ordinal();
            }
          case 94: break;
          case 45: 
            { System.out.printf("%s ",yytext()); return tokens.t_extends.ordinal();
            }
          case 95: break;
          case 46: 
            { System.out.printf("%s ",yytext()); return tokens.t_boolean.ordinal();
            }
          case 96: break;
          case 47: 
            { System.out.printf("%s ",yytext()); return tokens.t_println.ordinal();
            }
          case 97: break;
          case 48: 
            { System.out.printf("%s ",yytext()); return tokens.t_newarray.ordinal();
            }
          case 98: break;
          case 49: 
            { System.out.printf("%s ",yytext()); return tokens.t_interface.ordinal();
            }
          case 99: break;
          case 50: 
            { System.out.printf("%s ",yytext()); return tokens.t_implements.ordinal();
            }
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
